package leetcode_2020;/*
* https://leetcode-cn.com/problems/house-robber-iii/
* 在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。
* 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。
* 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。
计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

*/

import java.util.HashMap;
import java.util.Map;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */
class robIII
{
    Map<TreeNode, Integer> map = new HashMap();

    public int rob(TreeNode root)
    {
        if (root == null)
            return 0;
        if (map.containsKey(root))
            return map.get(root);
        int do_res = root.val
                + (root.left == null ? 0 : rob(root.left.left) + rob(root.left.right))
                + (root.right == null ? 0 : rob(root.right.left) + rob(root.right.right));
        int not_do_res = (root.left == null ? 0 : rob(root.left))
                + (root.right == null ? 0 : rob(root.right));
        int res = Math.max(do_res, not_do_res);
        map.put(root, res);
        return res;
    }
}